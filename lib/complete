#! /bin/bash

_@go.complete_top_level_commands() {
  local cmd_name="$1"
  local all_commands=()
  all_commands+=($(_@go.source_builtin 'aliases'))
  all_commands+=($(_@go.source_builtin 'commands'))

  local IFS=$'\n'
  compgen -W "${all_commands[*]}" -- "$cmd_name"
}

_@go.complete_command_path() {
  if [[ "$#" -eq 0 ]]; then
    return 1
  fi

  __go_complete_word_index="$1"
  shift
  . "$_GO_CORE_DIR/lib/path"

  if [[ "$#" -le 1 || "$__go_complete_word_index" -eq '0' ]]; then
    _@go.complete_top_level_commands "$1"
    return
  elif ! _@go.set_command_path_and_argv "$@"; then
    return 1
  fi
  (( __go_complete_word_index -= ($# - ${#__go_argv[@]}) ))

  if [[ "$__go_complete_word_index" -lt '0' ]]; then
    # This (sub)command itself is the completion target.
    echo "${__go_cmd_path##*/}"
    return

  elif [[ "$__go_complete_word_index" -eq '0' ]]; then
    # Complete subcommand scripts.
    local c
    local subcommands=()
    for c in "${__go_cmd_path}.d"/*; do
      if [[ -f "$c" && -x "$c" ]]; then
        subcommands+=("${c##*/}")
      fi
    done
    compgen -W "${subcommands[*]}" -- "${__go_argv[$__go_complete_word_index]}"

    # We want to return success because the caller may only be interested in
    # completing as much of an otherwise valid subcommand as possible.
    return 0
  fi
}
