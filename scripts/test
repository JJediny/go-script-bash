#! /bin/bash
#
# Run automated tests
#
# Usage:
#
#   {{go}} {{cmd}} [--list]
#   {{go}} {{cmd}} [--list] <glob> [<glob>...]
#
# Without arguments, runs all tests. With one or more <glob> arguments, only
# runs tests matching 'test/<glob>.bats'. With the --list flag, only lists the
# test file names without executing them.
#
# If a <glob> doesn't match any test files, the command will return an error
# without running any tests.
#
# NOTE: If the <glob> produces errors, or generally doesn't do as you expect,
# you may need to include it in quotes so it isn't expanded by the shell
# _before_ executing the test command.

_find_tests() {
  if [[ "$#" -eq '0' ]]; then
    tests=('test')
    return
  fi

  local test_name_or_glob
  local matches=()

  for test_name_or_glob in "$@"; do
    shopt -s nullglob
    matches=(test/$test_name_or_glob.bats)
    shopt -u nullglob

    if [[ "${#matches[@]}" -eq '0' ||
      ( "${#matches[@]}" -eq '1' && ! -f "${matches[0]}" ) ]]; then
      @go.printf "\"$test_name_or_glob\" does not match any test files.\n" >&2
      return 1
    fi
    tests+=("${matches[@]}")
  done
}

_filter_test_names_only() {
  tests=("${tests[@]#test/}")
  tests=("${tests[@]%.bats}")
}

_test() {
  local tests=()
  local list_only

  if [[ "$1" = '--complete' ]]; then
    # Tab completions
    if ! _find_tests '*'; then
      return 1
    fi
    _filter_test_names_only
    echo "--list ${tests[@]}"
    return
  elif [[ "$1" = '--list' ]]; then
    list_only='true'
    shift
  fi

  if !  _find_tests "$@"; then
    return 1
  elif [[ "$list_only" = 'true' ]]; then
    _filter_test_names_only
    local IFS=$'\n'
    echo "${tests[*]}"
  else
    test/bats/bin/bats "${tests[@]}"
  fi
}

_test "$@"
