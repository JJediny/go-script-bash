#! /bin/bash
#
# Run automated tests
#
# Usage:
#
#   {{go}} {{cmd}} [--list]
#   {{go}} {{cmd}} [--list] <glob> [<glob>...]
#
# Without arguments, runs all tests. With one or more <glob> arguments, only
# runs tests matching 'test/<glob>.bats'. With the --list flag, only lists the
# test file names without executing them.
#
# If a <glob> doesn't match any test files, the command will return an error
# without running any tests.
#
# NOTE: If the <glob> produces errors, or generally doesn't do as you expect,
# you may need to include it in quotes so it isn't expanded by the shell
# _before_ executing the test command.

_find_tests_helper() {
  local pattern="$1"

  shopt -s nullglob
  local matches=($pattern.bats)
  shopt -u nullglob

  if [[ "${#matches[@]}" -eq '0' || ! -f "${matches[0]}" ]]; then
    @go.printf "\"${pattern#tests/}\" does not match any test files.\n" >&2
    return 1
  fi

  local match

  for match in "${matches[@]}"; do
    tests+=("$match")

    # If the pattern isn't a literal file name, recurse into the directory
    # matching the file name if it exists.
    if [[ "$match" != "$pattern.bats" && -d "${match%.bats}" ]]; then
      if ! _find_tests_helper "${match%.bats}/*"; then
        return 1
      fi
    fi
  done
}

_find_tests() {
  local patterns=("$@")

  if [[ "$#" -eq '0' ]]; then
    patterns+=('*')
  fi

  local pattern

  for pattern in "${patterns[@]}"; do
    if ! _find_tests_helper "tests/$pattern"; then
      return 1
    fi
  done
}

_filter_test_names_only() {
  tests=("${tests[@]#tests/}")
  tests=("${tests[@]%.bats}")
}

_test_tab_completion() {
  if [[ "${1:0:1}" != '-' ]]; then
    echo -n "--list "
    shift
  fi

  local tests=()

  if ! _find_tests; then
    return 1
  fi
  _filter_test_names_only

  echo "${tests[@]}"
}

_test() {
  local list_only

  if [[ "$1" = '--complete' ]]; then
    # Tab completions
    shift
    _test_tab_completion "$@"
    return
  elif [[ "$1" = '--list' ]]; then
    list_only='true'
    shift
  fi

  local tests=()

  if !  _find_tests "$@"; then
    return 1
  elif [[ "$list_only" = 'true' ]]; then
    _filter_test_names_only
    local IFS=$'\n'
    echo "${tests[*]}"
  else
    tests/bats/bin/bats "${tests[@]}"
  fi
}

_test "$@"
